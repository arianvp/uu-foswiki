%META:TOPICINFO{author="DoaitseSwierstra" date="1341236682" format="1.1" reprev="1.3" version="1.3"}%
%META:TOPICPARENT{name="WebHome"}%
The project "Record Parsers and Configuration Tools" is divided in three segments:

   * Modeling applications and functionality.
   * Command line and configuration tools.
   * Merging parsers and parser library.


---++ Modeling applications and functionality.
Our first goal is to give developers a framework to structure their applications. An application can be designed as follows:

<verbatim>
data TextTool = 
  -- opens a file and displays the contents
  Display { 
    displayFilename :: String
  }

  -- converts a text file's tabs to spaces
  | Convert {
    inFilename :: String,
    outFilename :: String,
    spaces :: Int
  }

deriving (Show, Data, Typeable)


-- default values
display = Display {
  displayFilename = "in.txt"
  }

convert = { 
    inFilename = "in.txt",
    outFilename = "out.txt",
    spaces = 2 
  }

</verbatim>

This example shows two functionalities of a text editing tool. Functions can have multiple parameters of different types.


---++ The library helps with command lines options:

<verbatim>
  
main = do
  mode <- configure (Application "TextTool" "0.1" [
    Mode display ["-d", "--display"] "display a file to the screen", 
    Mode convert ["-c", "--convert"] "convert tabs to spaces in a file"]) 
  case mode of 
    (Display f) -> --....
    (Convert i o c) -> --...
   
</verbatim>

---++ A library for merging parsers

   * Parallel merging and combinatoric parsers
   * Parsing standard types
   * Parser library

Some examples of the parsers in this library are:
Western Names
Email
URI's

-- Main.TimoKoppenberg - 14 Jun 2012
